name: release

# Release dbz-lib

on:
  workflow_run:
    workflows:
      - build
    branches: [ main ]
    types:
      - completed

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64, ARM64 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Rust setup
      - name: Set up Rust environment
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel maturin

      # Run Cargo checks
      - name: Run cargo checks
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings

      # Run tests
      - name: Run tests
        run: cargo test --all-features

# TODO(cs): need a way to get version from the Cargo.toml
#      # Tag the commit with the library version
#      - name: Create git tag
#        uses: salsify/action-detect-and-tag-new-version@v2
#        with:
#          version-command: python setup.py --version
#
#      # Set release output variables
#      - name: Set output
#        id: vars
#        run: |
#          echo "::set-output name=tag_name::v$(python setup.py --version)"
#          echo "::set-output name=release_name::$(python setup.py --version)"
#
#      # Create GitHub release
#      - name: Create release
#        id: create-release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          TAG_NAME: ${{ steps.vars.outputs.tag_name }}
#          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}
#        with:
#          tag_name: ${{ env.TAG_NAME }}
#          release_name: ${{ env.RELEASE_NAME }}
#          draft: false
#          prerelease: false

      # Publish to PyPI
      - name: Publish to PyPI
        run: |
          cd src/dbz-lib
          maturin publish \
            --features python \
            --no-sdist \
            --username databento \
            --password ${{ secrets.MATURIN_PASSWORD }} \
            --interpreter python${{matrix.python_version}}
