name: release

# Release dbz-python

on:
  workflow_run:
    workflows:
      - build
    branches: [main]
    types:
      - completed

jobs:
  tag-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: tag-release - Python 3.10 (ubuntu-latest)
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel maturin

      # Run Cargo checks
      - name: Run cargo checks
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings

      # Run tests
      - name: Run tests
        run: cargo test --all-features

      # Tag the commit with the library version
      - name: Create git tag
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          version-command: scripts/get_version.sh

      # Set release output variables
      - name: Set output
        id: vars
        run: |
          echo "::set-output name=tag_name::v$(scripts/get_version.sh)"
          echo "::set-output name=release_name::$(scripts/get_version.sh)"

      # Create GitHub release
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.vars.outputs.tag_name }}
          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

  macos-release:
    needs: [tag-release]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --manifest-path src/dbz-python/Cargo.toml --interpreter python${{ matrix.python-version }}

      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --manifest-path src/dbz-python/Cargo.toml --interpreter python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows-release:
    needs: [tag-release]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: x64
          args: --release --out dist --manifest-path src/dbz-python/Cargo.toml --interpreter python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux-release:
    needs: [tag-release]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        target: [x86_64, aarch64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --manifest-path src/dbz-python/Cargo.toml --interpreter python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux-musl-release:
    needs: [tag-release]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist --manifest-path src/dbz-python/Cargo.toml --interpreter python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  publish:
    runs-on: ubuntu-latest
    needs:
      [
        tag-release,
        macos-release,
        windows-release,
        linux-release,
        linux-musl-release,
      ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      # Install publish dependencies
      - name: Install publish dependencies
        run: python -m pip install --upgrade twine
      - name: Publish to PyPI
        id: publish-to-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: twine upload *
      - name: Upload to release
        uses: actions/upload-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: wheels
          path: "*"
          upload_url: ${{ needs.tag-release.outputs.upload_url }}
